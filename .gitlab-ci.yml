image: golang:latest

stages:
  - test

test:
  stage: test
  script:
    - cd ./scripts && ./go.mod.sh
    - go install gotest.tools/gotestsum@latest
    - cd ./scripts && gotestsum --junitfile ../report.xml --format testname --raw-command ./go.test.sh -json
  artifacts:
    when: always
    reports:
      junit: report.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_BRANCH != "master"'
      when: always

test_full:
  stage: test
  variables:
    PARANOIA_INTEGRATED_TESTS: Y
    PARANOIA_INTEGRATED_SERVER: $PARANOIA_INTEGRATED_SERVER
  script:
    - cd ./scripts && ./go.mod.sh
    - go install gotest.tools/gotestsum@latest
    - cd ./scripts && gotestsum --junitfile ../report.xml --format testname --raw-command ./go.test.sh -json
  artifacts:
    when: always
    reports:
      junit: report.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always

coverage:
  stage: test
  variables:
    PARANOIA_INTEGRATED_TESTS: Y
    PARANOIA_INTEGRATED_SERVER: $PARANOIA_INTEGRATED_SERVER
  script:
    - cd ./scripts && ./go.mod.sh
    - cd ./scripts && ./go.coverage.sh
    - go get github.com/boumenot/gocover-cobertura
    - go run github.com/boumenot/gocover-cobertura < coverage.out > coverage.xml
    - go tool cover -func=coverage.out
  artifacts:
    paths:
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: /total:\s+\(statements\)\s+(\d+.\d+\%)/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
